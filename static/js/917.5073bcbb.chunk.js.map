{"version":3,"file":"static/js/917.5073bcbb.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/@tanstack/query-core/src/queryObserver.ts","../node_modules/@tanstack/react-query/src/QueryErrorResetBoundary.tsx","../node_modules/@tanstack/react-query/src/isRestoring.tsx","../node_modules/@tanstack/react-query/src/useBaseQuery.ts","../node_modules/@tanstack/react-query/src/suspense.ts","../node_modules/@tanstack/react-query/src/errorBoundaryUtils.ts","../node_modules/@tanstack/react-query/src/useQuery.ts","../node_modules/@tanstack/react-query/src/useSyncExternalStore.ts","../node_modules/@tanstack/react-query/src/utils.ts"],"sourcesContent":["import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}","import type { DefaultedQueryObserverOptions, RefetchPageFilters } from './types'\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\nimport type { Query, QueryState, Action, FetchOptions } from './query'\nimport type { QueryClient } from './queryClient'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { canFetch, isCancelledError } from './retryer'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\nexport interface NotifyOptions {\n  cache?: boolean\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  private currentQueryInitialState!: QueryState<TQueryData, TError>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private selectError: TError | null\n  private selectFn?: (data: TQueryData) => TData\n  private selectResult?: TData\n  private staleTimeoutId?: ReturnType<typeof setTimeout>\n  private refetchIntervalId?: ReturnType<typeof setInterval>\n  private currentRefetchInterval?: number | false\n  private trackedProps!: Set<keyof QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.trackedProps = new Set()\n    this.selectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch()\n      }\n\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.currentQuery\n\n    this.options = this.client.defaultQueryOptions(options)\n\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      typeof options?.isDataEqual !== 'undefined'\n    ) {\n      this.client\n        .getLogger()\n        .error(\n          `The isDataEqual option has been deprecated and will be removed in the next major version. You can achieve the same functionality by passing a function as the structuralSharing option`,\n        )\n    }\n\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.currentQuery,\n        observer: this,\n      })\n    }\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.updateQuery()\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        nextRefetchInterval !== this.currentRefetchInterval)\n    ) {\n      this.updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.client.getQueryCache().build(this.client, options)\n\n    return this.createResult(query, options)\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach((key) => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch<TPageData>({\n    refetchPage,\n    ...options\n  }: RefetchOptions & RefetchPageFilters<TPageData> = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: { refetchPage },\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.client.defaultQueryOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(this.client, defaultedOptions)\n    query.isFetchingOptimistic = true\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime,\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  private computeRefetchInterval() {\n    return typeof this.options.refetchInterval === 'function'\n      ? this.options.refetchInterval(this.currentResult.data, this.currentQuery)\n      : this.options.refetchInterval ?? false\n  }\n\n  private updateRefetchInterval(nextInterval: number | false): void {\n    this.clearRefetchInterval()\n\n    this.currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.currentRefetchInterval) ||\n      this.currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.currentRefetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval(this.computeRefetchInterval())\n  }\n\n  private clearStaleTimeout(): void {\n    if (this.staleTimeoutId) {\n      clearTimeout(this.staleTimeoutId)\n      this.staleTimeoutId = undefined\n    }\n  }\n\n  private clearRefetchInterval(): void {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId)\n      this.refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.currentQuery\n    const prevOptions = this.options\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.currentResultState\n    const prevResultOptions = this.currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.currentQueryInitialState\n    const prevQueryResult = queryChange\n      ? this.currentResult\n      : this.previousQueryResult\n\n    const { state } = query\n    let { dataUpdatedAt, error, errorUpdatedAt, fetchStatus, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode)\n          ? 'fetching'\n          : 'paused'\n        if (!dataUpdatedAt) {\n          status = 'loading'\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle'\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      options.keepPreviousData &&\n      !state.dataUpdatedAt &&\n      prevQueryResult?.isSuccess &&\n      status !== 'error'\n    ) {\n      data = prevQueryResult.data\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt\n      status = prevQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === this.selectFn\n      ) {\n        data = this.selectResult\n      } else {\n        try {\n          this.selectFn = options.select\n          data = options.select(state.data)\n          data = replaceData(prevResult?.data, data, options)\n          this.selectResult = data\n          this.selectError = null\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError)\n          }\n          this.selectError = selectError as TError\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = state.data as unknown as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'loading'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (options.placeholderData as PlaceholderDataFunction<TQueryData>)()\n            : options.placeholderData\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData)\n            this.selectError = null\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError)\n            }\n            this.selectError = selectError as TError\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = replaceData(prevResult?.data, placeholderData, options) as TData\n        isPlaceholderData = true\n      }\n    }\n\n    if (this.selectError) {\n      error = this.selectError as any\n      data = this.selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = fetchStatus === 'fetching'\n    const isLoading = status === 'loading'\n    const isError = status === 'error'\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus,\n      isLoading,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading && isFetching,\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      failureReason: state.fetchFailureReason,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isLoading,\n      isLoadingError: isError && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: isError && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.currentQuery, this.options)\n    this.currentResultState = this.currentQuery.state\n    this.currentResultOptions = this.options\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.currentResult = nextResult\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = { cache: true }\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n\n      if (\n        notifyOnChangeProps === 'all' ||\n        (!notifyOnChangeProps && !this.trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(notifyOnChangeProps ?? this.trackedProps)\n\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey]\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  private updateQuery(): void {\n    const query = this.client.getQueryCache().build(this.client, this.options)\n\n    if (query === this.currentQuery) {\n      return\n    }\n\n    const prevQuery = this.currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.currentQuery = query\n    this.currentQueryInitialState = query.state\n    this.previousQueryResult = this.currentResult\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    const notifyOptions: NotifyOptions = {}\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true\n    }\n\n    this.updateResult(notifyOptions)\n\n    if (this.hasListeners()) {\n      this.updateTimers()\n    }\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        this.options.onSuccess?.(this.currentResult.data!)\n        this.options.onSettled?.(this.currentResult.data!, null)\n      } else if (notifyOptions.onError) {\n        this.options.onError?.(this.currentResult.error!)\n        this.options.onSettled?.(undefined, this.currentResult.error!)\n      }\n\n      // Then trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated',\n        })\n      }\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.dataUpdatedAt > 0 &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: typeof options['refetchOnMount'] &\n    typeof options['refetchOnWindowFocus'] &\n    typeof options['refetchOnReconnect'],\n) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n","'use client'\nimport * as React from 'react'\n\n// CONTEXT\n\nexport interface QueryErrorResetBoundaryValue {\n  clearReset: () => void\n  isReset: () => boolean\n  reset: () => void\n}\n\nfunction createValue(): QueryErrorResetBoundaryValue {\n  let isReset = false\n  return {\n    clearReset: () => {\n      isReset = false\n    },\n    reset: () => {\n      isReset = true\n    },\n    isReset: () => {\n      return isReset\n    },\n  }\n}\n\nconst QueryErrorResetBoundaryContext = React.createContext(createValue())\n\n// HOOK\n\nexport const useQueryErrorResetBoundary = () =>\n  React.useContext(QueryErrorResetBoundaryContext)\n\n// COMPONENT\n\nexport interface QueryErrorResetBoundaryProps {\n  children:\n    | ((value: QueryErrorResetBoundaryValue) => React.ReactNode)\n    | React.ReactNode\n}\n\nexport const QueryErrorResetBoundary = ({\n  children,\n}: QueryErrorResetBoundaryProps) => {\n  const [value] = React.useState(() => createValue())\n  return (\n    <QueryErrorResetBoundaryContext.Provider value={value}>\n      {typeof children === 'function'\n        ? (children as Function)(value)\n        : children}\n    </QueryErrorResetBoundaryContext.Provider>\n  )\n}\n","'use client'\nimport * as React from 'react'\n\nconst IsRestoringContext = React.createContext(false)\n\nexport const useIsRestoring = () => React.useContext(IsRestoringContext)\nexport const IsRestoringProvider = IsRestoringContext.Provider\n","import * as React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport type { QueryKey, QueryObserver } from '@tanstack/query-core'\nimport { notifyManager } from '@tanstack/query-core'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport { useQueryClient } from './QueryClientProvider'\nimport type { UseBaseQueryOptions } from './types'\nimport { useIsRestoring } from './isRestoring'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport { ensureStaleTime, shouldSuspend, fetchOptimistic } from './suspense'\n\nexport function useBaseQuery<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: UseBaseQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  Observer: typeof QueryObserver,\n) {\n  const queryClient = useQueryClient({ context: options.context })\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const defaultedOptions = queryClient.defaultQueryOptions(options)\n\n  // Make sure results are optimistically set in fetching state before subscribing or updating options\n  defaultedOptions._optimisticResults = isRestoring\n    ? 'isRestoring'\n    : 'optimistic'\n\n  // Include callbacks in batch renders\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(\n      defaultedOptions.onError,\n    )\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(\n      defaultedOptions.onSuccess,\n    )\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(\n      defaultedOptions.onSettled,\n    )\n  }\n\n  ensureStaleTime(defaultedOptions)\n  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary)\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  const [observer] = React.useState(\n    () =>\n      new Observer<TQueryFnData, TError, TData, TQueryData, TQueryKey>(\n        queryClient,\n        defaultedOptions,\n      ),\n  )\n\n  const result = observer.getOptimisticResult(defaultedOptions)\n\n  useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        isRestoring\n          ? () => undefined\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer, isRestoring],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setOptions(defaultedOptions, { listeners: false })\n  }, [defaultedOptions, observer])\n\n  // Handle suspense\n  if (shouldSuspend(defaultedOptions, result, isRestoring)) {\n    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n  }\n\n  // Handle error boundary\n  if (\n    getHasError({\n      result,\n      errorResetBoundary,\n      useErrorBoundary: defaultedOptions.useErrorBoundary,\n      query: observer.getCurrentQuery(),\n    })\n  ) {\n    throw result.error\n  }\n\n  // Handle result property usage tracking\n  return !defaultedOptions.notifyOnChangeProps\n    ? observer.trackResult(result)\n    : result\n}\n","import type { DefaultedQueryObserverOptions } from '@tanstack/query-core'\nimport type { QueryObserver } from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\nimport type { QueryObserverResult } from '@tanstack/query-core'\nimport type { QueryKey } from '@tanstack/query-core'\n\nexport const ensureStaleTime = (\n  defaultedOptions: DefaultedQueryObserverOptions<any, any, any, any, any>,\n) => {\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000\n    }\n  }\n}\n\nexport const willFetch = (\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => result.isLoading && result.isFetching && !isRestoring\n\nexport const shouldSuspend = (\n  defaultedOptions:\n    | DefaultedQueryObserverOptions<any, any, any, any, any>\n    | undefined,\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => defaultedOptions?.suspense && willFetch(result, isRestoring)\n\nexport const fetchOptimistic = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  defaultedOptions: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) =>\n  observer\n    .fetchOptimistic(defaultedOptions)\n    .then(({ data }) => {\n      defaultedOptions.onSuccess?.(data as TData)\n      defaultedOptions.onSettled?.(data, null)\n    })\n    .catch((error) => {\n      errorResetBoundary.clearReset()\n      defaultedOptions.onError?.(error)\n      defaultedOptions.onSettled?.(undefined, error)\n    })\n","import type {\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserverResult,\n  UseErrorBoundary,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\nimport * as React from 'react'\nimport { shouldThrowError } from './utils'\n\nexport const ensurePreventErrorBoundaryRetry = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  if (options.suspense || options.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false\n    }\n  }\n}\n\nexport const useClearResetErrorBoundary = (\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n  }, [errorResetBoundary])\n}\n\nexport const getHasError = <\n  TData,\n  TError,\n  TQueryFnData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>({\n  result,\n  errorResetBoundary,\n  useErrorBoundary,\n  query,\n}: {\n  result: QueryObserverResult<TData, TError>\n  errorResetBoundary: QueryErrorResetBoundaryValue\n  useErrorBoundary: UseErrorBoundary<\n    TQueryFnData,\n    TError,\n    TQueryData,\n    TQueryKey\n  >\n  query: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n}) => {\n  return (\n    result.isError &&\n    !errorResetBoundary.isReset() &&\n    !result.isFetching &&\n    shouldThrowError(useErrorBoundary, [result.error, query])\n  )\n}\n","import type { QueryFunction, QueryKey } from '@tanstack/query-core'\nimport { parseQueryArgs, QueryObserver } from '@tanstack/query-core'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey'\n  >,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn'\n  >,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1: TQueryKey | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg2?:\n    | QueryFunction<TQueryFnData, TQueryKey>\n    | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg3?: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseQueryResult<TData, TError> {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(parsedOptions, QueryObserver)\n}\n","// Temporary workaround due to an issue with react-native uSES - https://github.com/TanStack/query/pull/3601\nimport { useSyncExternalStore as uSES } from 'use-sync-external-store/shim/index.js'\n\nexport const useSyncExternalStore = uSES\n","export function shouldThrowError<T extends (...args: any[]) => boolean>(\n  _useErrorBoundary: boolean | T | undefined,\n  params: Parameters<T>,\n): boolean {\n  // Allow useErrorBoundary function to override throwing behavior on a per-error basis\n  if (typeof _useErrorBoundary === 'function') {\n    return _useErrorBoundary(...params)\n  }\n\n  return !!_useErrorBoundary\n}\n"],"names":["_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","refetch","onSubscribe","listeners","currentQuery","addObserver","shouldFetchOnMount","executeFetch","updateTimers","onUnsubscribe","destroy","shouldFetchOnReconnect","shouldFetchOn","refetchOnReconnect","shouldFetchOnWindowFocus","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","removeObserver","notifyOptions","prevOptions","prevQuery","defaultQueryOptions","process","env","NODE_ENV","isDataEqual","getLogger","error","QueryObserver","enabled","Error","queryKey","updateQuery","mounted","hasListeners","shouldFetchOptionally","updateResult","staleTime","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","this","currentRefetchInterval","updateRefetchInterval","getOptimisticResult","build","createResult","getCurrentResult","currentResult","trackResult","result","trackedResult","forEach","defineProperty","configurable","enumerable","get","add","getCurrentQuery","refetchPage","fetch","meta","fetchOptimistic","defaultedOptions","isFetchingOptimistic","then","fetchOptions","cancelRefetch","_fetchOptions$cancelR","promise","throwOnError","catch","constructor","client","noop","options","isValidTimeout","trackedProps","isStale","time","timeUntilStale","dataUpdatedAt","timeout","staleTimeoutId","setTimeout","refetchInterval","data","_this$options$refetch","bindMethods","refetchIntervalId","setInterval","refetchIntervalInBackground","focusManager","isFocused","clearTimeout","undefined","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","observer","queryInitialState","state","currentQueryInitialState","prevQueryResult","previousQueryResult","errorUpdatedAt","fetchStatus","status","remove","isPreviousData","isPlaceholderData","_optimisticResults","fetchOnMount","fetchOptionally","canFetch","Set","shallowEqualObjects","networkMode","keepPreviousData","isSuccess","select","selectFn","selectResult","replaceData","placeholderData","Date","now","isFetching","isLoading","isError","isInitialLoading","failureCount","fetchFailureCount","failureReason","fetchFailureReason","errorUpdateCount","isFetched","dataUpdateCount","isFetchedAfterMount","isLoadingError","isPaused","isRefetchError","nextResult","defaultNotifyOptions","cache","notifyOnChangeProps","isRefetching","size","includedProps","useErrorBoundary","bind","some","selectError","changed","has","onQueryUpdate","action","onSuccess","manual","isCancelledError","onError","notifyManager","batch","onSettled","setOptions","Subscribable","listener","shouldLoadOnMount","retryOnMount","refetchOnMount","field","value","isReset","clearReset","reset","QueryErrorResetBoundaryContext","React","createValue","IsRestoringContext","Provider","batchCalls","useQueryClient","ensureStaleTime","ensurePreventErrorBoundaryRetry","useClearResetErrorBoundary","useState","Observer","suspense","useQueryErrorResetBoundary","isRestoring","getHasError","useIsRestoring","useBaseQuery","useCallback","onStoreChange","willFetch","errorResetBoundary","query","shouldThrowError","arg3","parsedOptions","parseQueryArgs","arg2","useQuery","arg1","useSyncExternalStore","uSES","_useErrorBoundary","params"],"sourceRoot":""}